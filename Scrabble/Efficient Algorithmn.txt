 Paper: https://www.cs.cmu.edu/afs/cs/academic/class/15451-s06/www/lectures/scrabble.pdf
 - First scan over the board for places where a word could connect letters
 - Only care about one dimension, as board can be flipped to generate down plays as across plays
    Compute cross-checks before each move generation -> set of letters which will form valid down words
    Don't have to recompute every cross check, only the changed ones
- Every across word is anchored (the leftmost placed tile)
- Only have consider one row at a time -- as already know every possible letter that can be played on each tile
- Represent dictionary as a trie (tree with labelled edges)
    Actually a Dawg (compressing tries together)
- Find all possible 'left parts' of a word (left of the anchor)
    For each "left part" find all matching right parts
    The left part will contain either tiles from our rack or already on the boar4d (but not both)